// utils/excelExport.js - Complete fix
const XLSX = require('xlsx');
const fs = require('fs');
const path = require('path');

class ExcelExporter {
  constructor() {
    this.exportsDir = path.join(__dirname, '..', 'exports');
    this.ensureExportsDir();
  }

  ensureExportsDir() {
    if (!fs.existsSync(this.exportsDir)) {
      fs.mkdirSync(this.exportsDir, { recursive: true });
      console.log(`📁 Created exports directory: ${this.exportsDir}`);
    }
  }

  generateFileName(prefix = 'export', includeDate = true) {
    const now = new Date();
    const timestamp = now.toISOString().slice(0, 10).replace(/-/g, '');
    const time = now.toTimeString().slice(0, 8).replace(/:/g, '');
    return includeDate 
      ? `${prefix}-${timestamp}-${time}.xlsx`
      : `${prefix}-${time}.xlsx`;
  }

  exportToExcel(data, filename = null) {
    try {
      console.log('🔄 Starting Excel generation...');
      
      const workbook = XLSX.utils.book_new();
      let finalFilename = filename || this.generateFileName('report');
      const filePath = path.join(this.exportsDir, finalFilename);

      // Handle different data structures
      if (data.summary && data.colleges) {
        // Annual report structure
        this.createSummarySheet(workbook, data.summary);
        this.createCollegesSheet(workbook, data.colleges);
      } else if (Array.isArray(data)) {
        // Simple array data
        const ws = XLSX.utils.json_to_sheet(data);
        XLSX.utils.book_append_sheet(workbook, ws, 'Data');
      } else if (typeof data === 'object') {
        // Single object
        const ws = XLSX.utils.json_to_sheet([data]);
        XLSX.utils.book_append_sheet(workbook, ws, 'Data');
      }

      // Write file
      XLSX.writeFile(workbook, filePath);
      
      const stats = fs.statSync(filePath);
      console.log(`✅ Excel file generated: ${filePath}`);
      console.log(`📊 File size: ${(stats.size / 1024).toFixed(2)} KB`);
      
      return {
        filename: finalFilename,
        path: filePath,
        // In exportToExcel, fullPath:
        fullPath: `http://localhost:${process.env.PORT || 3000}/exports/${finalFilename}`,
        size: stats.size,
        generatedAt: new Date().toISOString()
      };
    } catch (error) {
      console.error('❌ Excel generation failed:', error);
      throw new Error(`Excel export failed: ${error.message}`);
    }
  }

  createSummarySheet(workbook, summary) {
    const summaryData = [
      ['🏫 ANNUAL REPORT SUMMARY', ''],
      ['', ''],
      ['Metric', 'Value'],
      ['-', '-'],
      ['Total Colleges', summary.totalColleges || 0],
      ['Total Students', summary.totalStudents || 0],
      ['Total Teachers', summary.totalTeachers || 0],
      ['Total Fees Generated', `₹${(summary.totalFees || 0).toLocaleString()}`],
      ['Fees Collected', `₹${(summary.collectedFees || 0).toLocaleString()}`],
      ['Collection Percentage', `${(summary.collectionPercentage || 0).toFixed(2)}%`],
      ['Overall Attendance', `${(summary.attendancePercentage || 0).toFixed(2)}%`],
      ['Total Marks Recorded', summary.totalMarks || 0],
      ['Report Generated', new Date().toLocaleDateString()],
      ['', ''],
      ['Generated by', 'School ERP System'],
      ['Generated at', new Date().toLocaleTimeString()]
    ];

    const ws = XLSX.utils.aoa_to_sheet(summaryData);
    
    // Style the header
    if (ws['A1']) ws['A1'].s = {
      font: { bold: true, color: { rgb: 'FFFFFF' }, sz: 14 },
      fill: { fgColor: { rgb: '4472C4' } },
      alignment: { horizontal: 'center', vertical: 'center' }
    };

    XLSX.utils.book_append_sheet(workbook, ws, 'Summary');
  }

  createCollegesSheet(workbook, colleges) {
    if (!colleges || colleges.length === 0) {
      const emptyWs = XLSX.utils.aoa_to_sheet([['No college data available']]);
      XLSX.utils.book_append_sheet(workbook, emptyWs, 'Colleges');
      return;
    }

    const collegesData = colleges.map(college => {
      const stats = college.statistics || {};
      return {
        'College Name': college.college?.name || 'N/A',
        'College Code': college.college?.code || 'N/A',
        'Location': college.college?.address || 'N/A',
        'Total Students': stats.students?.total || 0,
        'Active Students': stats.students?.active || 0,
        'Student %': stats.students?.percentageActive ? `${stats.students.percentageActive}%` : '0%',
        'Total Teachers': stats.teachers?.total || 0,
        'Active Teachers': stats.teachers?.active || 0,
        'Teacher %': stats.teachers?.percentageActive ? `${stats.teachers.percentageActive}%` : '0%',
        'Total Fees': `₹${(stats.fees?.totalAmount || 0).toLocaleString()}`,
        'Collected': `₹${(stats.fees?.collectedAmount || 0).toLocaleString()}`,
        'Pending': `₹${(stats.fees?.pendingAmount || 0).toLocaleString()}`,
        'Collection %': stats.fees?.collectionPercentage ? `${stats.fees.collectionPercentage}%` : '0%',
        'Avg Attendance': stats.attendance?.averagePercentage ? `${stats.attendance.averagePercentage}%` : '0%',
        'Avg Marks': stats.academics?.averageStudentMarks || 0,
        'Total Marks': stats.academics?.totalMarksEntered || 0,
        'Leave Requests': stats.leaves?.totalRequests || 0,
        'Pending Leaves': stats.leaves?.pendingRequests || 0,
        'Last Updated': college.lastUpdated ? new Date(college.lastUpdated).toLocaleDateString() : 'N/A'
      };
    });

    const ws = XLSX.utils.json_to_sheet(collegesData);
    
    // Auto-size columns
    if (collegesData.length > 0) {
      const headers = Object.keys(collegesData[0]);
      const colWidths = headers.map(header => ({
        wch: Math.max(header.length, 12)
      }));
      ws['!cols'] = colWidths;
    }

    XLSX.utils.book_append_sheet(workbook, ws, 'Colleges');
  }
}

const exporter = new ExcelExporter();
module.exports = {
  exportToExcel: exporter.exportToExcel.bind(exporter),
  generateFileName: exporter.generateFileName.bind(exporter)
};